steps:

### Build

  - id: 'build'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          docker build -t gcr.io/${PROJECT_ID}/${IMAGE_NAME}:${IMAGE_TAG} .

### Publish
  - id: 'publish'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          docker push gcr.io/${PROJECT_ID}/${IMAGE_NAME}:${IMAGE_TAG}

### Scan

  - id: 'scan'
    name: 'gcr.io/cloud-builders/docker'
    env:
      - 'DSSC_HOST=\${_DSSC_HOST}'
      - 'DSSC_USER=\${_DSSC_USER}'
      - 'DSSC_PASSWORD=\${_DSSC_PASSWORD}'
      - 'PULL_AUTH=\${_PULL_AUTH}'

    entrypoint: 'bash'
    args:
      - '-c'
      - |
          docker run  -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.cache:/root/.cache/ deepsecurity/smartcheck-scan-action \
            --image-name=gcr.io/${PROJECT_ID}/${IMAGE_NAME}:${IMAGE_TAG} \
            --smartcheck-host=\$\${DSSC_HOST} \
            --smartcheck-user=\$\${DSSC_USER} \
            --smartcheck-password=\$\${DSSC_PASSWORD} \
            --image-pull-auth="\$\${PULL_AUTH}" \
            --findings-threshold='{"malware": 0, "vulnerabilities": { "defcon1": 0, "critical": 10, "high": 100 }, "contents": { "defcon1": 0, "critical": 0, "high": 0 }, "checklists": { "defcon1": 0, "critical": 0, "high": 0 }}'

### Deploy
  - id: 'deploy'
    name: 'gcr.io/cloud-builders/gcloud'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=\${_CLOUDSDK_COMPUTE_ZONE}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=\${_CLOUDSDK_CONTAINER_CLUSTER}'
      - 'KUBECONFIG=/kube/config'
      - 'CLOUDONE_TREND_AP_KEY=\${_CLOUDONE_TREND_AP_KEY}'
      - 'CLOUDONE_TREND_AP_SECRET=\${_CLOUDONE_TREND_AP_SECRET}'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          CLUSTER=\$\$(gcloud config get-value container/cluster)
          PROJECT_ID=\$\$(gcloud config get-value core/project)
          ZONE=\$\$(gcloud config get-value compute/zone)

          gcloud container clusters get-credentials "$\${CLUSTER}" \
            --project "\$\${PROJECT_ID}" \
            --zone "\$\${ZONE}"  

          sed -i 's|gcr.io/PROJECT/IMAGE_NAME:IMAGE_TAG|gcr.io/$PROJECT_ID/$IMAGE_NAME:$IMAGE_TAG|' ./app-gcp.yml
          sed -i 's|_TREND_AP_KEY|\$\${CLOUDONE_TREND_AP_KEY}|' ./app-gcp.yml
          sed -i 's|_TREND_AP_SECRET|\$\${CLOUDONE_TREND_AP_SECRET}|' ./app-gcp.yml

          kubectl get ns $IMAGE_NAME || kubectl create ns $IMAGE_NAME
          kubectl apply --namespace $IMAGE_NAME -f app-gcp.yml
          